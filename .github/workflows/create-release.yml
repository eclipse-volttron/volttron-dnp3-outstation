name: Create Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - v*     # Push events to matching v*, i.e. v1.0, v20.15.10

defaults:
  run:
    shell: bash

env:
  LANG: en_US.utf-8
  LC_ALL: en_US.utf-8
  PYTHON_VERSION: '3.8'
  PROJECT_NAME: volttron-dnp3-outstation
  POETRY_VERSION: 1.2.2

jobs:

  autorelease:

    runs-on: ubuntu-22.04

    steps:
    - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
    - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
    - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      id: setup-python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2.1.7
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
    - name: Install library
      run: poetry install --no-interaction

      #----------------------------------------------------------------
      #       get project version from pyproject.toml; store in env var
      #----------------------------------------------------------------
    - name: Add version to environment vars
      run: |
        PROJECT_VERSION=$(poetry version --short)
        echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV
    - name: Guardrail to check if tag version matches project version
      run: |
        TAG=$(git describe HEAD --tags --abbrev=0)
        echo $TAG
        echo $PROJECT_VERSION
        if [[ "$TAG" != "v$PROJECT_VERSION" ]]; then exit 1; fi

      #---------------------------------------------------------------
      # create build artifacts to be included as part of release
      #---------------------------------------------------------------
    - name: Create build artifacts
      run: |
        poetry build -vvv

      #----------------------------------------------------------------
      #       create release notes;
      #       the git log command will check all commits since the last tag to HEAD.
      #       For each commit, appends the commit hash, the commit message
      #       subject, the author name, and the author email to the release template.
      #----------------------------------------------------------------
    - name: Release Notes
      run: git log $(git describe HEAD~ --tags --abbrev=0)..HEAD --pretty='format:* %h %s%n  * %an <%ae>' --no-merges >> ".github/RELEASE-TEMPLATE.md"

      #----------------------------------------------------------------
      #       create release draft which will be visible at https://github.com/VOLTTRON/volttron-core/releases
      #----------------------------------------------------------------
    - name: Create Release Draft
      uses: softprops/action-gh-release@v1
      with:
        body_path: .github/RELEASE-TEMPLATE.md
        draft: true
        files: |
          dist/${{ env.PROJECT_NAME }}-${{env.PROJECT_VERSION}}-py3-none-any.whl
          dist/${{ env.PROJECT_NAME }}-${{env.PROJECT_VERSION}}.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
